// Copyright 2021 Google LLC
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// https://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

symbol = @{ (ASCII_ALPHANUMERIC | "@" | "/" | ".")+ }
literal_string = { "\"" ~ (!"\"" ~ ANY)+ ~ "\"" }

parents = { ":" }
ancestors = { "*:" }

function_name = @{ ASCII_ALPHANUMERIC+ }
// The grammar accepts a string literal or an expression for function
// arguments. We then decide when walking the parse tree if we
// should interpret the string value of the literal string or the expression
// as a string or an expression, or maybe as an integer. For example,
// parents(foo) might interpret "foo" as an expression, while limit(*:foo,5)
// might interpret its second argument as an integer. Also, parents("foo")
// might be disallowed, just as description(heads()) might be.
function_argument = {
  literal_string
  | expression
}
function_arguments = {
  (function_argument ~ ",")* ~ function_argument
  | ""
}

expression = {
  parents ~ expression
  | ancestors ~ expression
  | function_name ~ "(" ~ function_arguments ~ ")"
  | symbol
}
