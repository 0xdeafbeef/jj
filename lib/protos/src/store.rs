// This file is generated by rust-protobuf 2.18.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `store.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_0;

#[derive(PartialEq,Clone,Default)]
pub struct TreeValue {
    // message oneof groups
    pub value: ::std::option::Option<TreeValue_oneof_value>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TreeValue {
    fn default() -> &'a TreeValue {
        <TreeValue as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum TreeValue_oneof_value {
    normal_file(TreeValue_NormalFile),
    symlink_id(::std::vec::Vec<u8>),
    tree_id(::std::vec::Vec<u8>),
    conflict_id(::std::vec::Vec<u8>),
}

impl TreeValue {
    pub fn new() -> TreeValue {
        ::std::default::Default::default()
    }

    // .TreeValue.NormalFile normal_file = 2;


    pub fn get_normal_file(&self) -> &TreeValue_NormalFile {
        match self.value {
            ::std::option::Option::Some(TreeValue_oneof_value::normal_file(ref v)) => v,
            _ => <TreeValue_NormalFile as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_normal_file(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_normal_file(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(TreeValue_oneof_value::normal_file(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_normal_file(&mut self, v: TreeValue_NormalFile) {
        self.value = ::std::option::Option::Some(TreeValue_oneof_value::normal_file(v))
    }

    // Mutable pointer to the field.
    pub fn mut_normal_file(&mut self) -> &mut TreeValue_NormalFile {
        if let ::std::option::Option::Some(TreeValue_oneof_value::normal_file(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(TreeValue_oneof_value::normal_file(TreeValue_NormalFile::new()));
        }
        match self.value {
            ::std::option::Option::Some(TreeValue_oneof_value::normal_file(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_normal_file(&mut self) -> TreeValue_NormalFile {
        if self.has_normal_file() {
            match self.value.take() {
                ::std::option::Option::Some(TreeValue_oneof_value::normal_file(v)) => v,
                _ => panic!(),
            }
        } else {
            TreeValue_NormalFile::new()
        }
    }

    // bytes symlink_id = 3;


    pub fn get_symlink_id(&self) -> &[u8] {
        match self.value {
            ::std::option::Option::Some(TreeValue_oneof_value::symlink_id(ref v)) => v,
            _ => &[],
        }
    }
    pub fn clear_symlink_id(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_symlink_id(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(TreeValue_oneof_value::symlink_id(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_symlink_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = ::std::option::Option::Some(TreeValue_oneof_value::symlink_id(v))
    }

    // Mutable pointer to the field.
    pub fn mut_symlink_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(TreeValue_oneof_value::symlink_id(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(TreeValue_oneof_value::symlink_id(::std::vec::Vec::new()));
        }
        match self.value {
            ::std::option::Option::Some(TreeValue_oneof_value::symlink_id(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_symlink_id(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_symlink_id() {
            match self.value.take() {
                ::std::option::Option::Some(TreeValue_oneof_value::symlink_id(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // bytes tree_id = 4;


    pub fn get_tree_id(&self) -> &[u8] {
        match self.value {
            ::std::option::Option::Some(TreeValue_oneof_value::tree_id(ref v)) => v,
            _ => &[],
        }
    }
    pub fn clear_tree_id(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_tree_id(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(TreeValue_oneof_value::tree_id(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_tree_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = ::std::option::Option::Some(TreeValue_oneof_value::tree_id(v))
    }

    // Mutable pointer to the field.
    pub fn mut_tree_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(TreeValue_oneof_value::tree_id(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(TreeValue_oneof_value::tree_id(::std::vec::Vec::new()));
        }
        match self.value {
            ::std::option::Option::Some(TreeValue_oneof_value::tree_id(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_tree_id(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_tree_id() {
            match self.value.take() {
                ::std::option::Option::Some(TreeValue_oneof_value::tree_id(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // bytes conflict_id = 5;


    pub fn get_conflict_id(&self) -> &[u8] {
        match self.value {
            ::std::option::Option::Some(TreeValue_oneof_value::conflict_id(ref v)) => v,
            _ => &[],
        }
    }
    pub fn clear_conflict_id(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_conflict_id(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(TreeValue_oneof_value::conflict_id(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_conflict_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = ::std::option::Option::Some(TreeValue_oneof_value::conflict_id(v))
    }

    // Mutable pointer to the field.
    pub fn mut_conflict_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(TreeValue_oneof_value::conflict_id(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(TreeValue_oneof_value::conflict_id(::std::vec::Vec::new()));
        }
        match self.value {
            ::std::option::Option::Some(TreeValue_oneof_value::conflict_id(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_conflict_id(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_conflict_id() {
            match self.value.take() {
                ::std::option::Option::Some(TreeValue_oneof_value::conflict_id(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }
}

impl ::protobuf::Message for TreeValue {
    fn is_initialized(&self) -> bool {
        if let Some(TreeValue_oneof_value::normal_file(ref v)) = self.value {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(TreeValue_oneof_value::normal_file(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(TreeValue_oneof_value::symlink_id(is.read_bytes()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(TreeValue_oneof_value::tree_id(is.read_bytes()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(TreeValue_oneof_value::conflict_id(is.read_bytes()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &TreeValue_oneof_value::normal_file(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &TreeValue_oneof_value::symlink_id(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(3, &v);
                },
                &TreeValue_oneof_value::tree_id(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(4, &v);
                },
                &TreeValue_oneof_value::conflict_id(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(5, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &TreeValue_oneof_value::normal_file(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &TreeValue_oneof_value::symlink_id(ref v) => {
                    os.write_bytes(3, v)?;
                },
                &TreeValue_oneof_value::tree_id(ref v) => {
                    os.write_bytes(4, v)?;
                },
                &TreeValue_oneof_value::conflict_id(ref v) => {
                    os.write_bytes(5, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TreeValue {
        TreeValue::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, TreeValue_NormalFile>(
                "normal_file",
                TreeValue::has_normal_file,
                TreeValue::get_normal_file,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                "symlink_id",
                TreeValue::has_symlink_id,
                TreeValue::get_symlink_id,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                "tree_id",
                TreeValue::has_tree_id,
                TreeValue::get_tree_id,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                "conflict_id",
                TreeValue::has_conflict_id,
                TreeValue::get_conflict_id,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TreeValue>(
                "TreeValue",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TreeValue {
        static instance: ::protobuf::rt::LazyV2<TreeValue> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TreeValue::new)
    }
}

impl ::protobuf::Clear for TreeValue {
    fn clear(&mut self) {
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TreeValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TreeValue {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TreeValue_NormalFile {
    // message fields
    pub id: ::std::vec::Vec<u8>,
    pub executable: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TreeValue_NormalFile {
    fn default() -> &'a TreeValue_NormalFile {
        <TreeValue_NormalFile as ::protobuf::Message>::default_instance()
    }
}

impl TreeValue_NormalFile {
    pub fn new() -> TreeValue_NormalFile {
        ::std::default::Default::default()
    }

    // bytes id = 1;


    pub fn get_id(&self) -> &[u8] {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.id, ::std::vec::Vec::new())
    }

    // bool executable = 2;


    pub fn get_executable(&self) -> bool {
        self.executable
    }
    pub fn clear_executable(&mut self) {
        self.executable = false;
    }

    // Param is passed by value, moved
    pub fn set_executable(&mut self, v: bool) {
        self.executable = v;
    }
}

impl ::protobuf::Message for TreeValue_NormalFile {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.executable = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.id);
        }
        if self.executable != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_bytes(1, &self.id)?;
        }
        if self.executable != false {
            os.write_bool(2, self.executable)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TreeValue_NormalFile {
        TreeValue_NormalFile::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "id",
                |m: &TreeValue_NormalFile| { &m.id },
                |m: &mut TreeValue_NormalFile| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "executable",
                |m: &TreeValue_NormalFile| { &m.executable },
                |m: &mut TreeValue_NormalFile| { &mut m.executable },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TreeValue_NormalFile>(
                "TreeValue.NormalFile",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TreeValue_NormalFile {
        static instance: ::protobuf::rt::LazyV2<TreeValue_NormalFile> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TreeValue_NormalFile::new)
    }
}

impl ::protobuf::Clear for TreeValue_NormalFile {
    fn clear(&mut self) {
        self.id.clear();
        self.executable = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TreeValue_NormalFile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TreeValue_NormalFile {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Tree {
    // message fields
    pub entries: ::protobuf::RepeatedField<Tree_Entry>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Tree {
    fn default() -> &'a Tree {
        <Tree as ::protobuf::Message>::default_instance()
    }
}

impl Tree {
    pub fn new() -> Tree {
        ::std::default::Default::default()
    }

    // repeated .Tree.Entry entries = 1;


    pub fn get_entries(&self) -> &[Tree_Entry] {
        &self.entries
    }
    pub fn clear_entries(&mut self) {
        self.entries.clear();
    }

    // Param is passed by value, moved
    pub fn set_entries(&mut self, v: ::protobuf::RepeatedField<Tree_Entry>) {
        self.entries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entries(&mut self) -> &mut ::protobuf::RepeatedField<Tree_Entry> {
        &mut self.entries
    }

    // Take field
    pub fn take_entries(&mut self) -> ::protobuf::RepeatedField<Tree_Entry> {
        ::std::mem::replace(&mut self.entries, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Tree {
    fn is_initialized(&self) -> bool {
        for v in &self.entries {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entries)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.entries {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Tree {
        Tree::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Tree_Entry>>(
                "entries",
                |m: &Tree| { &m.entries },
                |m: &mut Tree| { &mut m.entries },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Tree>(
                "Tree",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Tree {
        static instance: ::protobuf::rt::LazyV2<Tree> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Tree::new)
    }
}

impl ::protobuf::Clear for Tree {
    fn clear(&mut self) {
        self.entries.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Tree {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Tree {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Tree_Entry {
    // message fields
    pub name: ::std::string::String,
    pub value: ::protobuf::SingularPtrField<TreeValue>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Tree_Entry {
    fn default() -> &'a Tree_Entry {
        <Tree_Entry as ::protobuf::Message>::default_instance()
    }
}

impl Tree_Entry {
    pub fn new() -> Tree_Entry {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .TreeValue value = 2;


    pub fn get_value(&self) -> &TreeValue {
        self.value.as_ref().unwrap_or_else(|| <TreeValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: TreeValue) {
        self.value = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut TreeValue {
        if self.value.is_none() {
            self.value.set_default();
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> TreeValue {
        self.value.take().unwrap_or_else(|| TreeValue::new())
    }
}

impl ::protobuf::Message for Tree_Entry {
    fn is_initialized(&self) -> bool {
        for v in &self.value {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let Some(ref v) = self.value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let Some(ref v) = self.value.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Tree_Entry {
        Tree_Entry::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Tree_Entry| { &m.name },
                |m: &mut Tree_Entry| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TreeValue>>(
                "value",
                |m: &Tree_Entry| { &m.value },
                |m: &mut Tree_Entry| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Tree_Entry>(
                "Tree.Entry",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Tree_Entry {
        static instance: ::protobuf::rt::LazyV2<Tree_Entry> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Tree_Entry::new)
    }
}

impl ::protobuf::Clear for Tree_Entry {
    fn clear(&mut self) {
        self.name.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Tree_Entry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Tree_Entry {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Commit {
    // message fields
    pub parents: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    pub predecessors: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    pub root_tree: ::std::vec::Vec<u8>,
    pub change_id: ::std::vec::Vec<u8>,
    pub description: ::std::string::String,
    pub author: ::protobuf::SingularPtrField<Commit_Signature>,
    pub committer: ::protobuf::SingularPtrField<Commit_Signature>,
    pub is_open: bool,
    pub is_pruned: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Commit {
    fn default() -> &'a Commit {
        <Commit as ::protobuf::Message>::default_instance()
    }
}

impl Commit {
    pub fn new() -> Commit {
        ::std::default::Default::default()
    }

    // repeated bytes parents = 1;


    pub fn get_parents(&self) -> &[::std::vec::Vec<u8>] {
        &self.parents
    }
    pub fn clear_parents(&mut self) {
        self.parents.clear();
    }

    // Param is passed by value, moved
    pub fn set_parents(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.parents = v;
    }

    // Mutable pointer to the field.
    pub fn mut_parents(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.parents
    }

    // Take field
    pub fn take_parents(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.parents, ::protobuf::RepeatedField::new())
    }

    // repeated bytes predecessors = 2;


    pub fn get_predecessors(&self) -> &[::std::vec::Vec<u8>] {
        &self.predecessors
    }
    pub fn clear_predecessors(&mut self) {
        self.predecessors.clear();
    }

    // Param is passed by value, moved
    pub fn set_predecessors(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.predecessors = v;
    }

    // Mutable pointer to the field.
    pub fn mut_predecessors(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.predecessors
    }

    // Take field
    pub fn take_predecessors(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.predecessors, ::protobuf::RepeatedField::new())
    }

    // bytes root_tree = 3;


    pub fn get_root_tree(&self) -> &[u8] {
        &self.root_tree
    }
    pub fn clear_root_tree(&mut self) {
        self.root_tree.clear();
    }

    // Param is passed by value, moved
    pub fn set_root_tree(&mut self, v: ::std::vec::Vec<u8>) {
        self.root_tree = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_root_tree(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.root_tree
    }

    // Take field
    pub fn take_root_tree(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.root_tree, ::std::vec::Vec::new())
    }

    // bytes change_id = 4;


    pub fn get_change_id(&self) -> &[u8] {
        &self.change_id
    }
    pub fn clear_change_id(&mut self) {
        self.change_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_change_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.change_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_change_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.change_id
    }

    // Take field
    pub fn take_change_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.change_id, ::std::vec::Vec::new())
    }

    // string description = 5;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // .Commit.Signature author = 6;


    pub fn get_author(&self) -> &Commit_Signature {
        self.author.as_ref().unwrap_or_else(|| <Commit_Signature as ::protobuf::Message>::default_instance())
    }
    pub fn clear_author(&mut self) {
        self.author.clear();
    }

    pub fn has_author(&self) -> bool {
        self.author.is_some()
    }

    // Param is passed by value, moved
    pub fn set_author(&mut self, v: Commit_Signature) {
        self.author = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_author(&mut self) -> &mut Commit_Signature {
        if self.author.is_none() {
            self.author.set_default();
        }
        self.author.as_mut().unwrap()
    }

    // Take field
    pub fn take_author(&mut self) -> Commit_Signature {
        self.author.take().unwrap_or_else(|| Commit_Signature::new())
    }

    // .Commit.Signature committer = 7;


    pub fn get_committer(&self) -> &Commit_Signature {
        self.committer.as_ref().unwrap_or_else(|| <Commit_Signature as ::protobuf::Message>::default_instance())
    }
    pub fn clear_committer(&mut self) {
        self.committer.clear();
    }

    pub fn has_committer(&self) -> bool {
        self.committer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_committer(&mut self, v: Commit_Signature) {
        self.committer = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_committer(&mut self) -> &mut Commit_Signature {
        if self.committer.is_none() {
            self.committer.set_default();
        }
        self.committer.as_mut().unwrap()
    }

    // Take field
    pub fn take_committer(&mut self) -> Commit_Signature {
        self.committer.take().unwrap_or_else(|| Commit_Signature::new())
    }

    // bool is_open = 8;


    pub fn get_is_open(&self) -> bool {
        self.is_open
    }
    pub fn clear_is_open(&mut self) {
        self.is_open = false;
    }

    // Param is passed by value, moved
    pub fn set_is_open(&mut self, v: bool) {
        self.is_open = v;
    }

    // bool is_pruned = 9;


    pub fn get_is_pruned(&self) -> bool {
        self.is_pruned
    }
    pub fn clear_is_pruned(&mut self) {
        self.is_pruned = false;
    }

    // Param is passed by value, moved
    pub fn set_is_pruned(&mut self, v: bool) {
        self.is_pruned = v;
    }
}

impl ::protobuf::Message for Commit {
    fn is_initialized(&self) -> bool {
        for v in &self.author {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.committer {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.parents)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.predecessors)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.root_tree)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.change_id)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.author)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.committer)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_open = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_pruned = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.parents {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        for value in &self.predecessors {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        if !self.root_tree.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.root_tree);
        }
        if !self.change_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.change_id);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.description);
        }
        if let Some(ref v) = self.author.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.committer.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.is_open != false {
            my_size += 2;
        }
        if self.is_pruned != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.parents {
            os.write_bytes(1, &v)?;
        };
        for v in &self.predecessors {
            os.write_bytes(2, &v)?;
        };
        if !self.root_tree.is_empty() {
            os.write_bytes(3, &self.root_tree)?;
        }
        if !self.change_id.is_empty() {
            os.write_bytes(4, &self.change_id)?;
        }
        if !self.description.is_empty() {
            os.write_string(5, &self.description)?;
        }
        if let Some(ref v) = self.author.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.committer.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.is_open != false {
            os.write_bool(8, self.is_open)?;
        }
        if self.is_pruned != false {
            os.write_bool(9, self.is_pruned)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Commit {
        Commit::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "parents",
                |m: &Commit| { &m.parents },
                |m: &mut Commit| { &mut m.parents },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "predecessors",
                |m: &Commit| { &m.predecessors },
                |m: &mut Commit| { &mut m.predecessors },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "root_tree",
                |m: &Commit| { &m.root_tree },
                |m: &mut Commit| { &mut m.root_tree },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "change_id",
                |m: &Commit| { &m.change_id },
                |m: &mut Commit| { &mut m.change_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &Commit| { &m.description },
                |m: &mut Commit| { &mut m.description },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Commit_Signature>>(
                "author",
                |m: &Commit| { &m.author },
                |m: &mut Commit| { &mut m.author },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Commit_Signature>>(
                "committer",
                |m: &Commit| { &m.committer },
                |m: &mut Commit| { &mut m.committer },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "is_open",
                |m: &Commit| { &m.is_open },
                |m: &mut Commit| { &mut m.is_open },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "is_pruned",
                |m: &Commit| { &m.is_pruned },
                |m: &mut Commit| { &mut m.is_pruned },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Commit>(
                "Commit",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Commit {
        static instance: ::protobuf::rt::LazyV2<Commit> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Commit::new)
    }
}

impl ::protobuf::Clear for Commit {
    fn clear(&mut self) {
        self.parents.clear();
        self.predecessors.clear();
        self.root_tree.clear();
        self.change_id.clear();
        self.description.clear();
        self.author.clear();
        self.committer.clear();
        self.is_open = false;
        self.is_pruned = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Commit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Commit {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Commit_Timestamp {
    // message fields
    pub millis_since_epoch: u64,
    pub tz_offset: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Commit_Timestamp {
    fn default() -> &'a Commit_Timestamp {
        <Commit_Timestamp as ::protobuf::Message>::default_instance()
    }
}

impl Commit_Timestamp {
    pub fn new() -> Commit_Timestamp {
        ::std::default::Default::default()
    }

    // uint64 millis_since_epoch = 1;


    pub fn get_millis_since_epoch(&self) -> u64 {
        self.millis_since_epoch
    }
    pub fn clear_millis_since_epoch(&mut self) {
        self.millis_since_epoch = 0;
    }

    // Param is passed by value, moved
    pub fn set_millis_since_epoch(&mut self, v: u64) {
        self.millis_since_epoch = v;
    }

    // int32 tz_offset = 2;


    pub fn get_tz_offset(&self) -> i32 {
        self.tz_offset
    }
    pub fn clear_tz_offset(&mut self) {
        self.tz_offset = 0;
    }

    // Param is passed by value, moved
    pub fn set_tz_offset(&mut self, v: i32) {
        self.tz_offset = v;
    }
}

impl ::protobuf::Message for Commit_Timestamp {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.millis_since_epoch = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.tz_offset = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.millis_since_epoch != 0 {
            my_size += ::protobuf::rt::value_size(1, self.millis_since_epoch, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tz_offset != 0 {
            my_size += ::protobuf::rt::value_size(2, self.tz_offset, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.millis_since_epoch != 0 {
            os.write_uint64(1, self.millis_since_epoch)?;
        }
        if self.tz_offset != 0 {
            os.write_int32(2, self.tz_offset)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Commit_Timestamp {
        Commit_Timestamp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "millis_since_epoch",
                |m: &Commit_Timestamp| { &m.millis_since_epoch },
                |m: &mut Commit_Timestamp| { &mut m.millis_since_epoch },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "tz_offset",
                |m: &Commit_Timestamp| { &m.tz_offset },
                |m: &mut Commit_Timestamp| { &mut m.tz_offset },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Commit_Timestamp>(
                "Commit.Timestamp",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Commit_Timestamp {
        static instance: ::protobuf::rt::LazyV2<Commit_Timestamp> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Commit_Timestamp::new)
    }
}

impl ::protobuf::Clear for Commit_Timestamp {
    fn clear(&mut self) {
        self.millis_since_epoch = 0;
        self.tz_offset = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Commit_Timestamp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Commit_Timestamp {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Commit_Signature {
    // message fields
    pub name: ::std::string::String,
    pub email: ::std::string::String,
    pub timestamp: ::protobuf::SingularPtrField<Commit_Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Commit_Signature {
    fn default() -> &'a Commit_Signature {
        <Commit_Signature as ::protobuf::Message>::default_instance()
    }
}

impl Commit_Signature {
    pub fn new() -> Commit_Signature {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string email = 2;


    pub fn get_email(&self) -> &str {
        &self.email
    }
    pub fn clear_email(&mut self) {
        self.email.clear();
    }

    // Param is passed by value, moved
    pub fn set_email(&mut self, v: ::std::string::String) {
        self.email = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_email(&mut self) -> &mut ::std::string::String {
        &mut self.email
    }

    // Take field
    pub fn take_email(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.email, ::std::string::String::new())
    }

    // .Commit.Timestamp timestamp = 3;


    pub fn get_timestamp(&self) -> &Commit_Timestamp {
        self.timestamp.as_ref().unwrap_or_else(|| <Commit_Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp.clear();
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: Commit_Timestamp) {
        self.timestamp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timestamp(&mut self) -> &mut Commit_Timestamp {
        if self.timestamp.is_none() {
            self.timestamp.set_default();
        }
        self.timestamp.as_mut().unwrap()
    }

    // Take field
    pub fn take_timestamp(&mut self) -> Commit_Timestamp {
        self.timestamp.take().unwrap_or_else(|| Commit_Timestamp::new())
    }
}

impl ::protobuf::Message for Commit_Signature {
    fn is_initialized(&self) -> bool {
        for v in &self.timestamp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.email)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.timestamp)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.email.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.email);
        }
        if let Some(ref v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.email.is_empty() {
            os.write_string(2, &self.email)?;
        }
        if let Some(ref v) = self.timestamp.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Commit_Signature {
        Commit_Signature::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Commit_Signature| { &m.name },
                |m: &mut Commit_Signature| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "email",
                |m: &Commit_Signature| { &m.email },
                |m: &mut Commit_Signature| { &mut m.email },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Commit_Timestamp>>(
                "timestamp",
                |m: &Commit_Signature| { &m.timestamp },
                |m: &mut Commit_Signature| { &mut m.timestamp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Commit_Signature>(
                "Commit.Signature",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Commit_Signature {
        static instance: ::protobuf::rt::LazyV2<Commit_Signature> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Commit_Signature::new)
    }
}

impl ::protobuf::Clear for Commit_Signature {
    fn clear(&mut self) {
        self.name.clear();
        self.email.clear();
        self.timestamp.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Commit_Signature {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Commit_Signature {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Conflict {
    // message fields
    pub removes: ::protobuf::RepeatedField<Conflict_Part>,
    pub adds: ::protobuf::RepeatedField<Conflict_Part>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Conflict {
    fn default() -> &'a Conflict {
        <Conflict as ::protobuf::Message>::default_instance()
    }
}

impl Conflict {
    pub fn new() -> Conflict {
        ::std::default::Default::default()
    }

    // repeated .Conflict.Part removes = 1;


    pub fn get_removes(&self) -> &[Conflict_Part] {
        &self.removes
    }
    pub fn clear_removes(&mut self) {
        self.removes.clear();
    }

    // Param is passed by value, moved
    pub fn set_removes(&mut self, v: ::protobuf::RepeatedField<Conflict_Part>) {
        self.removes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_removes(&mut self) -> &mut ::protobuf::RepeatedField<Conflict_Part> {
        &mut self.removes
    }

    // Take field
    pub fn take_removes(&mut self) -> ::protobuf::RepeatedField<Conflict_Part> {
        ::std::mem::replace(&mut self.removes, ::protobuf::RepeatedField::new())
    }

    // repeated .Conflict.Part adds = 2;


    pub fn get_adds(&self) -> &[Conflict_Part] {
        &self.adds
    }
    pub fn clear_adds(&mut self) {
        self.adds.clear();
    }

    // Param is passed by value, moved
    pub fn set_adds(&mut self, v: ::protobuf::RepeatedField<Conflict_Part>) {
        self.adds = v;
    }

    // Mutable pointer to the field.
    pub fn mut_adds(&mut self) -> &mut ::protobuf::RepeatedField<Conflict_Part> {
        &mut self.adds
    }

    // Take field
    pub fn take_adds(&mut self) -> ::protobuf::RepeatedField<Conflict_Part> {
        ::std::mem::replace(&mut self.adds, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Conflict {
    fn is_initialized(&self) -> bool {
        for v in &self.removes {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.adds {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.removes)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.adds)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.removes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.adds {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.removes {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.adds {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Conflict {
        Conflict::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Conflict_Part>>(
                "removes",
                |m: &Conflict| { &m.removes },
                |m: &mut Conflict| { &mut m.removes },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Conflict_Part>>(
                "adds",
                |m: &Conflict| { &m.adds },
                |m: &mut Conflict| { &mut m.adds },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Conflict>(
                "Conflict",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Conflict {
        static instance: ::protobuf::rt::LazyV2<Conflict> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Conflict::new)
    }
}

impl ::protobuf::Clear for Conflict {
    fn clear(&mut self) {
        self.removes.clear();
        self.adds.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Conflict {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Conflict {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Conflict_Part {
    // message fields
    pub content: ::protobuf::SingularPtrField<TreeValue>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Conflict_Part {
    fn default() -> &'a Conflict_Part {
        <Conflict_Part as ::protobuf::Message>::default_instance()
    }
}

impl Conflict_Part {
    pub fn new() -> Conflict_Part {
        ::std::default::Default::default()
    }

    // .TreeValue content = 1;


    pub fn get_content(&self) -> &TreeValue {
        self.content.as_ref().unwrap_or_else(|| <TreeValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_content(&mut self) {
        self.content.clear();
    }

    pub fn has_content(&self) -> bool {
        self.content.is_some()
    }

    // Param is passed by value, moved
    pub fn set_content(&mut self, v: TreeValue) {
        self.content = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_content(&mut self) -> &mut TreeValue {
        if self.content.is_none() {
            self.content.set_default();
        }
        self.content.as_mut().unwrap()
    }

    // Take field
    pub fn take_content(&mut self) -> TreeValue {
        self.content.take().unwrap_or_else(|| TreeValue::new())
    }
}

impl ::protobuf::Message for Conflict_Part {
    fn is_initialized(&self) -> bool {
        for v in &self.content {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.content)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.content.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.content.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Conflict_Part {
        Conflict_Part::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TreeValue>>(
                "content",
                |m: &Conflict_Part| { &m.content },
                |m: &mut Conflict_Part| { &mut m.content },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Conflict_Part>(
                "Conflict.Part",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Conflict_Part {
        static instance: ::protobuf::rt::LazyV2<Conflict_Part> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Conflict_Part::new)
    }
}

impl ::protobuf::Clear for Conflict_Part {
    fn clear(&mut self) {
        self.content.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Conflict_Part {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Conflict_Part {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bstore.proto\"\xfb\x01\n\tTreeValue\x12:\n\x0bnormal_file\x18\x02\
    \x20\x01(\x0b2\x15.TreeValue.NormalFileH\0R\nnormalFileB\0\x12!\n\nsymli\
    nk_id\x18\x03\x20\x01(\x0cH\0R\tsymlinkIdB\0\x12\x1b\n\x07tree_id\x18\
    \x04\x20\x01(\x0cH\0R\x06treeIdB\0\x12#\n\x0bconflict_id\x18\x05\x20\x01\
    (\x0cH\0R\nconflictIdB\0\x1aB\n\nNormalFile\x12\x10\n\x02id\x18\x01\x20\
    \x01(\x0cR\x02idB\0\x12\x20\n\nexecutable\x18\x02\x20\x01(\x08R\nexecuta\
    bleB\0:\0B\x07\n\x05value:\0\"v\n\x04Tree\x12'\n\x07entries\x18\x01\x20\
    \x03(\x0b2\x0b.Tree.EntryR\x07entriesB\0\x1aC\n\x05Entry\x12\x14\n\x04na\
    me\x18\x01\x20\x01(\tR\x04nameB\0\x12\"\n\x05value\x18\x02\x20\x01(\x0b2\
    \n.TreeValueR\x05valueB\0:\0:\0\"\x96\x04\n\x06Commit\x12\x1a\n\x07paren\
    ts\x18\x01\x20\x03(\x0cR\x07parentsB\0\x12$\n\x0cpredecessors\x18\x02\
    \x20\x03(\x0cR\x0cpredecessorsB\0\x12\x1d\n\troot_tree\x18\x03\x20\x01(\
    \x0cR\x08rootTreeB\0\x12\x1d\n\tchange_id\x18\x04\x20\x01(\x0cR\x08chang\
    eIdB\0\x12\"\n\x0bdescription\x18\x05\x20\x01(\tR\x0bdescriptionB\0\x12+\
    \n\x06author\x18\x06\x20\x01(\x0b2\x11.Commit.SignatureR\x06authorB\0\
    \x121\n\tcommitter\x18\x07\x20\x01(\x0b2\x11.Commit.SignatureR\tcommitte\
    rB\0\x12\x19\n\x07is_open\x18\x08\x20\x01(\x08R\x06isOpenB\0\x12\x1d\n\t\
    is_pruned\x18\t\x20\x01(\x08R\x08isPrunedB\0\x1a\\\n\tTimestamp\x12.\n\
    \x12millis_since_epoch\x18\x01\x20\x01(\x04R\x10millisSinceEpochB\0\x12\
    \x1d\n\ttz_offset\x18\x02\x20\x01(\x05R\x08tzOffsetB\0:\0\x1an\n\tSignat\
    ure\x12\x14\n\x04name\x18\x01\x20\x01(\tR\x04nameB\0\x12\x16\n\x05email\
    \x18\x02\x20\x01(\tR\x05emailB\0\x121\n\ttimestamp\x18\x03\x20\x01(\x0b2\
    \x11.Commit.TimestampR\ttimestampB\0:\0:\0\"\x90\x01\n\x08Conflict\x12*\
    \n\x07removes\x18\x01\x20\x03(\x0b2\x0e.Conflict.PartR\x07removesB\0\x12\
    $\n\x04adds\x18\x02\x20\x03(\x0b2\x0e.Conflict.PartR\x04addsB\0\x1a0\n\
    \x04Part\x12&\n\x07content\x18\x01\x20\x01(\x0b2\n.TreeValueR\x07content\
    B\0:\0:\0B\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
